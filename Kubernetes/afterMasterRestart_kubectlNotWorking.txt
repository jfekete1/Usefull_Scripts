ON MASTER:
export KUBECONFIG=/etc/kubernetes/kubelet.conf
ping node01

View Certificates:
openssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout

If MASTER IP HAS CHANGED:
systemctl stop kubelet docker
cd /etc/

# backup old kubernetes data
mv kubernetes kubernetes-backup
mv /var/lib/kubelet /var/lib/kubelet-backup

# restore certificates
mkdir -p kubernetes
cp -r kubernetes-backup/pki kubernetes
rm kubernetes/pki/{apiserver.*,etcd/peer.*}

systemctl start docker

# reinit master with data in etcd
# add --kubernetes-version, --pod-network-cidr and --token options if needed
kubeadm init --ignore-preflight-errors=DirAvailable--var-lib-etcd --pod-network-cidr=10.244.0.0/16

# update kubectl config
cp kubernetes/admin.conf ~/.kube/config

# wait for some time and delete old node
sleep 120
kubectl get nodes --sort-by=.metadata.creationTimestamp
kubectl delete node $(kubectl get nodes -o jsonpath='{.items[?(@.status.conditions[0].status=="Unknown")].metadata.name}')

# check running pods
kubectl get pods --all-namespaces






ON NODES:
#make sure you can reach the master
ping master
You do not want to use kubeadm reset. That will reset everything and you would have to start configuring your cluster again.

Well, in your scenario, please have a look on the steps below:

nano /etc/hosts (update your new IP against YOUR_HOSTNAME)
vi $KUBECONFIG
change server: https://192.168...
cd /etc/kubernetes
vi controller-manager.conf
change server: https://192.168...
vi kubelet.conf
change server: https://192.168...

ÚJRA KELL GENERÁLNI A KULCSOKAT !!
kubeadm token create --help
kubeadm init phase upload-certs --upload-certs




cd manifests
vi etcd.yaml
:%s/search_string/replacement_string/g
pl.
:%s/120/210/g
vi kube-apiserver.yaml
:%s/120/210/g
vi kube-controller-manager.yaml
:%s/120/210/g
vi kube-scheduler.yaml
:%s/120/210/g



KUBE_MASTER="--master=http://YOUR_HOSTNAME:8080"

KUBE_ETCD_SERVERS="--etcd-servers=http://YOUR_HOSTNAME:2379" #2379 is default port

nano /etc/etcd/etcd.conf (conf related to etcd)

KUBE_ETCD_SERVERS="--etcd-servers=http://YOUR_HOSTNAME/WHERE_EVER_ETCD_HOSTED:2379"

2379 is default port for etcd. and you can have multiple etcd servers defined here comma separated

Restart kubelet, apiserver, etcd services.

It is good to use hostname instead of IP to avoid such scenarios.

Hope it helps!







Otherwise...
kubeadm reset
rm -rf /etc/cni/net.d/
rm -rf /etc/kubernetes
#use join token, to join the cluster
kubeadm join master:6443 --token ... --discovery-token-ca-cert-hash ...



########################################################################################
########################################################################################
########################################################################################
########################################################################################
scriptbe kell majd:
oldip=192.168.0.124
newip=192.168.3.167
cd /etc/kubernetes
# see before
find . -type f | xargs grep $oldip
# modify files in place
find . -type f | xargs sed -i "s/$oldip/$newip/"
# see after
find . -type f | xargs grep $newip

mkdir ~/k8s-old-pki
cp -Rvf /etc/kubernetes/pki/* ~/k8s-old-pki

cd /etc/kubernetes/pki
for f in $(find -name "*.crt"); do openssl x509 -in $f -text -noout > $f.txt; done
grep -Rl $oldip .
for f in $(find -name "*.crt"); do rm $f.txt; done

# find all the config map names
configmaps=$(kubectl -n kube-system get cm -o name | \
  awk '{print $1}' | \
  cut -d '/' -f 2)

# fetch all for filename reference
dir=$(mktemp -d)
for cf in $configmaps; do kubectl -n kube-system get cm $cf -o yaml > $dir/$cf.yaml; done

# have grep help you find the files to edit, and where
grep -Hn $dir/* -e $oldip

# edit those files, in my case, grep only returned these two:
kubectl -n kube-system edit cm kubeadm-config
kubectl -n kube-system edit cm kube-proxy

vi /etc/hosts

rm apiserver.crt apiserver.key
kubeadm alpha phase certs apiserver
rm etcd/peer.crt etcd/peer.key
kubeadm alpha phase certs etcd-peer

sudo systemctl restart kubelet
sudo systemctl restart docker

sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config



#########################################################################################
TALÁN EZ JÓ:
systemctl stop kubelet docker

cd /etc/

# backup old kubernetes data
mv /etc/kubernetes /etc/kubernetes-backup
mv /var/lib/kubelet /var/lib/kubelet-backup

# restore certificates
mkdir -p /etc/kubernetes
cp -r /etc/kubernetes-backup/pki kubernetes
rm /etc/kubernetes/pki/{apiserver.*,etcd/peer.*}

systemctl start docker

# reinit master with data in etcd
# add --kubernetes-version, --pod-network-cidr and --token options if needed
kubeadm init --ignore-preflight-errors=DirAvailable--var-lib-etcd

# update kubectl config
cp /etc/kubernetes/admin.conf ~/.kube/config

# wait for some time and delete old node
sleep 120
kubectl get nodes --sort-by=.metadata.creationTimestamp
kubectl delete node $(kubectl get nodes -o jsonpath='{.items[?(@.status.conditions[0].status=="Unknown")].metadata.name}')

# check running pods
kubectl get pods --all-namespaces

########################################################################
ON NODE01
vi /etc/hosts (also edit hosts file on master again!!)
systemctl stop kubelet
systemctl stop docker
systemctl start docker

ON MASTER:
vi /etc/hosts
scp jointoken osboxes@node01:/home/osboxes

ON NODE01:
cat /home/osboxes/jointoken
use command to join !!!!


change argocd password to asdasd:
kubectl -n argocd patch secret argocd-secret \
  -p '{"stringData": {
    "admin.password": "$2a$10$qsixbgmq1EO1yUgZAzH.6OTFn9XzfF7wwj/BO.xbRbU0CxuogVWBy",
    "admin.passwordMtime": "'$(date +%FT%T%Z)'"
  }}'

